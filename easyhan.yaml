# 2024.02.04.2314
# Change to your:
# - board
# - adc sensor ( or remove )
# - wifi
# - uart pins

substitutions:

  dev: EB1test
  name: edpbox1test

interval:

  - interval: 9s
    then:
      - lambda: |-
          if (id(edpbox_polling).state) {
              id(edpbox).update();
          }

esphome:
  name: easyhan
  friendly_name: easyhan
  on_boot:
    priority: -500
    then:
      - delay: 15s
      - switch.turn_on: edpbox_polling

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "pTFSuGUleFztCNi0j8BysDZBXcwot8BQEH5Jo617u9w="
  reboot_timeout: 30min

ota:
  password: "b6c1e6e3fd6a6d2710c785baa05784a7"

wifi:
  output_power: 15db
  # domain: .lan
  # use_address: 10.3.0.142
  # fix ota dns error

  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Easyhan Fallback Hotspot"
    password: "iEigYPElDGFe"

captive_portal:

web_server:
  local: true

#logger:
#  level: verbose
#  baud_rate: 0
  

time:
  - platform: homeassistant
    id: esptime

button:

  - platform: restart
    name: "${dev} ESP Restart"

switch:

  - platform: gpio
    id: led_pin
    pin:
      number: 2
      inverted: yes

  - platform: template
    name: "${dev} ESP Polling"
    id: "edpbox_polling"
    optimistic: yes

uart:

# esp32 19/18
# esp8266 3/1
# tfreire 14/5

  id: modbus_serial
  rx_pin: 14
  tx_pin: 5
  baud_rate: 9600
  stop_bits: 1

modbus:
  #flow_control_pin: 5
  id: modbus1
  uart_id: modbus_serial
  send_wait_time: 350ms

modbus_controller:

  - id: edpbox
    update_interval: never
    address: 0x1
    command_throttle: 150ms
    setup_priority: -10
    offline_skip_updates: 25

sensor:

#  - platform: adc
#    pin: VCC
#    name: "${dev} Adc Addon"
#    # esp8266 only

  - platform: template
    name: "${dev} ESP Free Heap"
    lambda: |-
      int heap = ESP.getFreeHeap();
      return heap / 1024.0;
    unit_of_measurement: "kB"
    icon: mdi:chip
    state_class: measurement

  - platform: wifi_signal
    name: "${dev} ESP Signal"
    unit_of_measurement: "dB"
    state_class: measurement

  - platform: uptime
    name: "${dev} ESP Uptime"
    filters:
      - lambda: return x/3600;
    unit_of_measurement: "h"
    accuracy_decimals: 1
    device_class: ""

### ### ###

### Voltage & Current ###

  - platform: modbus_controller
    name: "${dev} Voltage L1"
    address: 0x006C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current L1"
    address: 0x006D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: current
    state_class: measurement

### Active Power & Power Factor ###

  - platform: modbus_controller
    name: "${dev} Active Power Import"
    address: 0x0079
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power Export"
    address: 0x007A
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Power Factor"
    address: 0x007B
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

### Frequency ###

  - platform: modbus_controller
    name: "${dev} Frequency"
    address: 0x007F
    unit_of_measurement: "Hz"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    icon: "mdi:pulse"
    state_class: measurement

### Total Energy Tariffs ###

  - platform: modbus_controller
    name: "${dev} T1 Vazio"
    address: 0x0026
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    skip_updates: 2

  - platform: modbus_controller 
    name: "${dev} T2 Ponta"
    address: 0x0027
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} T3 Cheias"
    address: 0x0028
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

### Total Energy ###

  - platform: modbus_controller
    name: "${dev} Import"
    address: 0x0016
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} Export"
    address: 0x0017
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

### Contract ###

  - platform: modbus_controller
    name: "${dev} Contract T1"
    address: 0x000C
    force_new_range: true
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 2
    filters:
      - multiply: 0.001
    unit_of_measurement: "kVA"
    state_class: measurement
    icon: mdi:flash

### Load Profile ###

  - platform: template
    name: "${dev} LP3 Import Inc"
    id: lp3_imp
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh/15m"
    state_class: measurement
    icon: mdi:counter

  - platform: template
    name: "${dev} LP6 Export Inc"
    id: lp6_exp
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh/15m"
    state_class: measurement
    icon: mdi:counter

### ### ###

text_sensor:

  - platform: template
    name: "${dev} ESP Clock"
    icon: mdi:clock
    lambda: |-
      char str[25];
      time_t currTime = id(esptime).now().timestamp;
      strftime(str, sizeof(str), "%H:%M:%S", localtime(&currTime));
      return {str};
    update_interval: 9s

###

  - platform: modbus_controller
    name: "${dev} Clock"
    register_type: read
    address: 0x0001
    register_count: 1
    response_size: 12
    raw_encode: NONE
    icon: mdi:clock
    lambda: |-
        uint8_t hh, mm, ss;
        hh = data[5];
        mm = data[6];
        ss = data[7];
        char ebclk[20];
        sprintf(ebclk,"%02d:%02d:%02d",hh,mm,ss);
        return {ebclk};
    on_value:
      - then:
        - switch.turn_on: led_pin
        - delay: 30ms
        - switch.turn_off: led_pin

###

  - platform: modbus_controller
    name: "${dev} LP1 Date Time"
    custom_command: [0x1, 0x44, 0x6, 0x1]
    register_count: 1
    response_size: 34
    lambda: |-
      uint16_t lpYY = data[2] << 8 | data[3];
      uint8_t lpMT = data[4];
      uint8_t lpDD = data[5];
      uint8_t lpHH = data[7];
      uint8_t lpMM = data[8];
      uint32_t lpIMP = data[15] << 24 | data[16] << 16 | data[17] << 8 | data[18]; 
      uint32_t lpEXP = data[27] << 24 | data[28] << 16 | data[29] << 8 | data[30]; 
      id(lp3_imp).publish_state(lpIMP);
      id(lp6_exp).publish_state(lpEXP);
      char lpclk[25];
      sprintf(lpclk,"%04d-%02d-%02dT%02d:%02d",lpYY,lpMT,lpDD,lpHH,lpMM);
      return {lpclk};
    icon: mdi:calendar

###

  - platform: modbus_controller
    name: "${dev} Tariff"
    register_type: read
    address: 0x000B
    register_count: 1
    response_size: 2
    raw_encode: COMMA
    icon: mdi:counter
    lambda: |-
        auto z = "Null";
        if (x == "1,0") z = "Vazio";
        else if (x == "2,0") z = "Ponta";
        else if (x == "3,0") z = "Cheias";
        return {z};

#######
# eof #
#######
